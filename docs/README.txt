Pour commencer, version simple en faisant un d√©coupage de 4 par 4 de l'image par la case noire en bas de l'image √† droite

Ce **TP en langage C** consiste √† programmer un **jeu de taquin** avec une interface graphique en utilisant la **LibMLV**. Voici les principales √©tapes pour mener √† bien ce projet :

---

### üîπ **1. Comprendre le fonctionnement du jeu de taquin**
Le taquin est un puzzle constitu√© de **15 pi√®ces num√©rot√©es de 1 √† 15** sur une grille **4x4**, avec une **case vide** permettant de faire glisser les pi√®ces adjacentes.
Le but est de remettre les pi√®ces dans l'ordre en effectuant des d√©placements.

---

### üîπ **2. Chargement et d√©coupage de l‚Äôimage**
- **Choisir une image** de **512x512 pixels** (formats accept√©s : PNG, JPG, GIF).
- **D√©couper l‚Äôimage en 16 carr√©s** (4x4).
- **Cr√©er une structure de donn√©es** pour repr√©senter chaque carr√© et sa position initiale.

  ```c
  #define NB_COL 4
  #define NB_LIG 4

  typedef struct carre {
      int lig;  // Ligne de la pi√®ce dans l‚Äô√©tat final
      int col;  // Colonne de la pi√®ce dans l‚Äô√©tat final
  } Carre;

  typedef struct plateau {
      Carre bloc[NB_LIG][NB_COL];  // Matrice de 4x4
  } Plateau;
  ```

- **Initialiser le plateau** pour qu‚Äôil repr√©sente l‚Äô√©tat final.

  ```c
  void InitialisationPlateau(Plateau *P) {
      int i, j;
      for (i = 0; i < NB_LIG; i++) {
          for (j = 0; j < NB_COL; j++) {
              P->bloc[i][j].lig = i;
              P->bloc[i][j].col = j;
          }
      }
  }
  ```

---

### üîπ **3. M√©lange du plateau**
- **M√©langer les pi√®ces de mani√®re valide** :
  ‚ö†Ô∏è **Attention !** On ne peut pas m√©langer les pi√®ces de mani√®re totalement al√©atoire, car toutes les configurations ne sont pas r√©solubles.
- **Solution sugg√©r√©e** : Appliquer **120 d√©placements al√©atoires valides** √† partir de l'√©tat final.

  ```c
  // Fonction pour g√©n√©rer un mouvement al√©atoire parmi les mouvements possibles
  void MelangerPlateau(Plateau *P) {
      for (int i = 0; i < 120; i++) {
          // D√©placer al√©atoirement la case vide (mouvements autoris√©s)
      }
  }
  ```

---

### üîπ **4. Affichage avec la biblioth√®que LibMLV**
La **LibMLV** est utilis√©e pour g√©rer l‚Äôinterface graphique :
- **Cr√©er une fen√™tre** : `MLV_create_window()`
- **Charger l‚Äôimage** : `MLV_load_image()`
- **Dessiner l‚Äôimage d√©coup√©e** : `MLV_draw_image_part()`
- **G√©rer les d√©placements avec la souris** : `MLV_wait_mouse()`
- **Actualiser la fen√™tre** : `MLV_actualise_window()`

Exemple de cr√©ation de fen√™tre :
```c
MLV_create_window("Taquin", "Jeu de Taquin", 512, 512);
```

---

### üîπ **5. Interaction avec le joueur**
- **D√©tecter les clics de la souris** : `MLV_wait_mouse(&x, &y);`
- **D√©terminer si un mouvement est possible**
- **√âchanger la case vide avec une case voisine**
- **V√©rifier si le puzzle est r√©solu**
- **Afficher un message de victoire et le temps √©coul√©**

